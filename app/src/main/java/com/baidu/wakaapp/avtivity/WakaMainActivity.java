/* * Copyright (c) 2018. puchunjie */package com.baidu.wakaapp.avtivity;import android.Manifest;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.media.projection.MediaProjection;import android.media.projection.MediaProjectionManager;import android.os.Build;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.annotation.RequiresApi;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentStatePagerAdapter;import android.support.v4.view.ViewPager;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.widget.RadioButton;import android.widget.Toast;import com.baidu.wakaapp.R;import com.baidu.wakaapp.fragment.HomeFragment;import com.baidu.wakaapp.fragment.VeidoFragment;import com.baidu.wakaapp.helper.ShakePhoneManager;import java.util.ArrayList;import java.util.List;@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)public class WakaMainActivity extends AppCompatActivity implements View.OnClickListener {    public static final String TAG = WakaMainActivity.class.getSimpleName();    private ViewPager viewPager;    private List<Fragment> list;    private RadioButton rb_home;    private RadioButton rb_vedio;    // 屏幕录制相关    private MediaProjection projection;    private MediaProjectionManager projectionManager;    // 权限请求相关    private static final String[] ALL_PERMISSIONS = new String[]{            Manifest.permission.WRITE_EXTERNAL_STORAGE,            Manifest.permission.RECORD_AUDIO,            //  Manifest.permission.SYSTEM_ALERT_WINDOW,            Manifest.permission.CAMERA,    };    private static final int REQUEST_CODE_ASK_ALL_PERMISSIONS = 10086;    private static final int SCREEN_REQUEST_CODE = 10010;    private boolean mIsDenyAllPermission = false;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_waka_main);        initView();        initData();        // 开启屏幕录制的权限        permisionScreenVedio();    }    private void permisionScreenVedio() {        if (projectionManager == null) {            projectionManager = (MediaProjectionManager) getSystemService(Context.MEDIA_PROJECTION_SERVICE);            Intent screenvedio = projectionManager.createScreenCaptureIntent();            startActivityForResult(screenvedio, SCREEN_REQUEST_CODE);        }    }    private void initView() {        viewPager = findViewById(R.id.vp_content);        rb_vedio = findViewById(R.id.rb_vedio);        rb_home = findViewById(R.id.rb_home);        list = new ArrayList<Fragment>();        HomeFragment homeFragment = new HomeFragment();        VeidoFragment veidoFragment = new VeidoFragment();        list.add(homeFragment);        list.add(veidoFragment);        rb_home.setOnClickListener(this);        rb_vedio.setOnClickListener(this);    }    private void initData() {        ShakePhoneManager manager = new ShakePhoneManager(this);        viewPager.setAdapter(new FragmentStatePagerAdapter(getSupportFragmentManager()) {            @Override            public Fragment getItem(int i) {                return list.get(i);            }            @Override            public int getCount() {                return list.size();            }        });        viewPager.setCurrentItem(0);        rb_home.setTextColor(getResources().getColor(R.color.color_f8999a));        rb_vedio.setTextColor(getResources().getColor(R.color.black));        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {            @Override            public void onPageScrolled(int i, float v, int i1) {            }            @Override            public void onPageSelected(int i) {                if (i == 0) {                    rb_vedio.setTextColor(getResources().getColor(R.color.black));                    rb_vedio.setChecked(false);                    rb_home.setTextColor(getResources().getColor(R.color.color_f8999a));                    rb_home.setChecked(true);                } else {                    rb_home.setTextColor(getResources().getColor(R.color.black));                    rb_home.setChecked(false);                    rb_vedio.setTextColor(getResources().getColor(R.color.color_f8999a));                    rb_vedio.setChecked(true);                }            }            @Override            public void onPageScrollStateChanged(int i) {            }        });        manager.setOnShakeListener(new ShakePhoneManager.OnShakeListener() {            @Override            public void onShake() {                Toast.makeText(WakaMainActivity.this, "你在摇晃手机", Toast.LENGTH_SHORT).show();            }        });    }    @Override    protected void onResume() {        super.onResume();        requestAllPermissions(REQUEST_CODE_ASK_ALL_PERMISSIONS);    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.rb_home:                viewPager.setCurrentItem(0);                rb_home.setTextColor(getResources().getColor(R.color.color_f8999a));                rb_vedio.setTextColor(getResources().getColor(R.color.black));                break;            case R.id.rb_vedio:                viewPager.setCurrentItem(1);                rb_home.setTextColor(getResources().getColor(R.color.black));                rb_vedio.setTextColor(getResources().getColor(R.color.color_f8999a));                break;            default:                break;        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (resultCode == RESULT_OK && requestCode == SCREEN_REQUEST_CODE) {            projection = projectionManager.getMediaProjection(resultCode, data);        }    }    /**     * 权限相关     */    /**     * 请求权限     *     * @param requestCode     */    private void requestAllPermissions(int requestCode) {        try {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                List<String> permissionsList = getRequestPermissions(this);                if (permissionsList.size() == 0) {                    //  Toast.makeText(this, "正在拷贝资源", Toast.LENGTH_SHORT).show();                    return;                }                if (!mIsDenyAllPermission) {                    requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),                            requestCode);                }            } else {            }        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {        if (requestCode == REQUEST_CODE_ASK_ALL_PERMISSIONS) {            mIsDenyAllPermission = false;            for (int i = 0; i < permissions.length; i++) {                if (i >= grantResults.length || grantResults[i] == PackageManager.PERMISSION_DENIED) {                    mIsDenyAllPermission = true;                    break;                }            }            if (mIsDenyAllPermission) {                finish();            }        }    }    private static List<String> getRequestPermissions(Activity activity) {        List<String> permissionsList = new ArrayList();        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {            for (String permission : ALL_PERMISSIONS) {                if (activity.checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {                    permissionsList.add(permission);                }            }        }        return permissionsList;    }}